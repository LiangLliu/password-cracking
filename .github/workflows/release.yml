name: Release

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      tag_name:
        description: 'Tag name for release'
        required: true
        default: 'v0.0.1'

env:
  CARGO_TERM_COLOR: always

jobs:
  # 创建 Release Draft
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      release_id: ${{ steps.create-release.outputs.id }}
      upload_url: ${{ steps.create-release.outputs.upload_url }}
    steps:
      - uses: actions/checkout@v5

      - name: Generate changelog
        id: changelog
        uses: heinrichreimer/action-github-changelog-generator@v2.4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Create Release
        id: create-release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.event.inputs.tag_name || github.ref_name }}
          release_name: Release ${{ github.event.inputs.tag_name || github.ref_name }}
          body: |
            ## 🎉 Password Cracking Tool Release ${{ github.event.inputs.tag_name || github.ref_name }}

            ### 📋 更新日志
            ${{ steps.changelog.outputs.changelog }}

            ### 📥 下载说明

            请根据您的操作系统和架构选择合适的版本：

            **Linux:**
            - `password-cracking-linux-amd64`: 适用于 x86_64 Linux
            - `password-cracking-linux-arm64`: 适用于 ARM64 Linux
            - `password-cracking-linux-amd64-musl`: 适用于 Alpine Linux 等基于 musl 的发行版

            **macOS:**
            - `password-cracking-macos-amd64`: 适用于 Intel Mac
            - `password-cracking-macos-arm64`: 适用于 Apple Silicon (M1/M2/M3) Mac

            **Windows:**
            - `password-cracking-windows-amd64.exe`: 适用于 64 位 Windows
            - `password-cracking-windows-i686.exe`: 适用于 32 位 Windows
            - `password-cracking-windows-arm64.exe`: 适用于 ARM64 Windows

            ### 🔐 校验和
            每个文件都附带 `.sha256` 校验和文件，请在使用前验证文件完整性。

          draft: false
          prerelease: false

  # 构建并上传
  build-and-upload:
    name: Build and Upload - ${{ matrix.target }}
    needs: create-release
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            name: password-cracking-linux-amd64

          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            name: password-cracking-linux-arm64
            use-cross: true

          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl
            name: password-cracking-linux-amd64-musl
            use-cross: true

          # macOS
          - os: macos-latest
            target: x86_64-apple-darwin
            name: password-cracking-macos-amd64

          - os: macos-latest
            target: aarch64-apple-darwin
            name: password-cracking-macos-arm64

          # Windows
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            name: password-cracking-windows-amd64.exe

          - os: windows-latest
            target: i686-pc-windows-msvc
            name: password-cracking-windows-i686.exe

          - os: windows-latest
            target: aarch64-pc-windows-msvc
            name: password-cracking-windows-arm64.exe

    steps:
      - uses: actions/checkout@v5

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install Cross
        if: matrix.use-cross
        run: cargo install cross --git https://github.com/cross-rs/cross

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-release-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}

      - name: Build (cargo)
        if: ${{ !matrix.use-cross }}
        run: cargo build --release --target ${{ matrix.target }}

      - name: Build (cross)
        if: ${{ matrix.use-cross }}
        run: cross build --release --target ${{ matrix.target }}

      - name: Package Binary
        shell: bash
        run: |
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            cp target/${{ matrix.target }}/release/password-cracking.exe ${{ matrix.name }}
          else
            cp target/${{ matrix.target }}/release/password-cracking ${{ matrix.name }}
            chmod +x ${{ matrix.name }}
          fi

      - name: Create Archive
        shell: bash
        run: |
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            # Windows - 创建 ZIP
            7z a ${{ matrix.name }}.zip ${{ matrix.name }} README.md || 7z a ${{ matrix.name }}.zip ${{ matrix.name }}
            sha256sum ${{ matrix.name }}.zip > ${{ matrix.name }}.zip.sha256
            echo "ASSET_NAME=${{ matrix.name }}.zip" >> $GITHUB_ENV
            echo "CHECKSUM_NAME=${{ matrix.name }}.zip.sha256" >> $GITHUB_ENV
          else
            # Unix - 创建 tar.gz
            tar -czf ${{ matrix.name }}.tar.gz ${{ matrix.name }} README.md || tar -czf ${{ matrix.name }}.tar.gz ${{ matrix.name }}
            shasum -a 256 ${{ matrix.name }}.tar.gz > ${{ matrix.name }}.tar.gz.sha256
            echo "ASSET_NAME=${{ matrix.name }}.tar.gz" >> $GITHUB_ENV
            echo "CHECKSUM_NAME=${{ matrix.name }}.tar.gz.sha256" >> $GITHUB_ENV
          fi

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./${{ env.ASSET_NAME }}
          asset_name: ${{ env.ASSET_NAME }}
          asset_content_type: application/octet-stream

      - name: Upload Checksum
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./${{ env.CHECKSUM_NAME }}
          asset_name: ${{ env.CHECKSUM_NAME }}
          asset_content_type: text/plain